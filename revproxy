#!/bin/bash
# Por C0nt05

# Definindo cores
vermelha='\033[0;31m'
verde='\033[0;32m'
amarelo='\033[0;33m'
azul='\033[0;34m'
rosa='\033[0;35m'
cinza='\033[0;90m'
sem_cor='\033[0m'
revproxy_installed=false
local_version="1.3"
remote_version_url="https://raw.githubusercontent.com/talesam/revproxy/main/versao.txt"

# Verifica se o script está sendo executado como root
if [[ $EUID -ne 0 ]]; then
    echo ""
    echo -e "${vermelha}Este script deve ser executado como root ou com sudo.${sem_cor}"
    exit 1
fi

# Verifica se o arquivo /usr/local/bin/revproxy já existe
if [ -f /usr/local/bin/revproxy ]; then
    revproxy_installed=true
fi

# Função para instalar/atualizar revproxy
install_revproxy() {
    clear
    if [ ! -f /usr/local/bin/revproxy ]; then
        echo ""
        echo -e "${amarelo}Instalando revproxy...${sem_cor}" && sleep 1
        wget -q -O /usr/local/bin/revproxy https://raw.githubusercontent.com/talesam/revproxy/main/revproxy
        chmod +x /usr/local/bin/revproxy
        echo -e "${verde}revproxy instalado com sucesso!${sem_cor} Para executar use o comando ${rosa}revproxy${sem_cor}"
        
        install_proxy # Chama a função para instalar o proxy
        revproxy_installed=true
        echo ""
    else
        echo -e "${azul}RevProxy já está instalado.${sem_cor}"
    fi
}

# Função para verificar e atualizar a versão do script
check_update() {
    clear
    remote_version=$(wget -qO- "$remote_version_url")
    if [ "$remote_version" != "$local_version" ]; then
        echo -e "${amarelo}Uma nova versão do script está disponível!${sem_cor}"
        echo -e "${amarelo}Versão Atual: $local_version, Nova Versão: $remote_version${sem_cor}"

        # Implementação da lógica de atualização
        echo -e "${amarelo}Atualizando script...${sem_cor}"
        wget -q -O /usr/local/bin/revproxy https://raw.githubusercontent.com/talesam/revproxy/main/revproxy
        chmod +x /usr/local/bin/revproxy
        echo -e "${verde}Script atualizado para a versão $remote_version. Por favor, execute-o novamente.${sem_cor}"
        exit 0
    else
        echo ""
        echo -e "${verde}Você já está na versão mais recente ($local_version)${sem_cor}"
        echo ""
    fi
}

# Solicita e valida a porta
get_port() {
    #clear
    local port
    read -r port
    port=${port:-80} # Porta padrão é 80

    # Verifica se a porta é um número válido
    if ! [[ $port =~ ^[0-9]+$ ]] || [ $port -le 0 ] || [ $port -gt 65535 ]; then
        echo -e "${vermelha}Porta inválida. Por favor, insira um número entre 1 e 65535.${sem_cor}"
        return 1
    fi

    echo $port
}

# Solicita o nome da VPN
get_vpn_name() {
    #clear
    local vpn_name
    read -r vpn_name

    if [ -z "$vpn_name" ]; then
        echo -e "${vermelha}Nome da VPN não pode ser vazio.${sem_cor}"
        return 1
    fi

    echo $vpn_name
}

# Função para instalar o proxy
install_proxy() {
    clear
    echo ""
    if [ -f /usr/bin/proxy.bak ]; then
        echo -e " ${azul}*${sem_cor} ${amarelo}Um backup do proxy já existe. Instalação cancelada para evitar sobrescrever o backup.${sem_cor}"
        echo ""
        return
    fi
    if [ -f /usr/bin/proxy ]; then
        mv /usr/bin/proxy /usr/bin/proxy.bak
        echo -e "${amarelo}Backup do proxy atual salvo como proxy.bak${sem_cor}"
    fi
    curl -s -L -o /usr/bin/proxy https://github.com/RevTunnel/ProxyCracked/raw/main/DT%201.2.5/X86/proxy
    chmod +x /usr/bin/proxy
    clear
    echo ""
    echo -e "${verde}Proxy instalado com sucesso!${sem_cor}"
}

# Função para restaurar o proxy original
restore_proxy() {
    clear
    echo ""
    if [ -f /usr/bin/proxy.bak ]; then
        mv /usr/bin/proxy.bak /usr/bin/proxy
        echo -e " ${verde}*${sem_cor} Proxy original restaurado com sucesso."
        echo ""
        revproxy_installed=false
    else
        echo -e "${vermelha}Backup do proxy não encontrado.${sem_cor}"
        echo ""
    fi
}

# Função para listar portas em execução
list_ports() {
    clear
    echo -e "${amarelo}Portas em execução:${sem_cor}"
    netstat -tuln | grep LISTEN
}

# Função para matar processo em uma porta específica
kill_port() {
    clear
    echo ""
    echo -n "Digite a porta para encerrar o processo: "
    read port
    pid=$(lsof -t -i:$port)
    if [ -n "$pid" ]; then
        kill $pid
        echo -e "${verde}Processo na porta $port encerrado.${sem_cor}"
    else
        echo -e "${vermelha}Nenhum processo encontrado na porta $port.${sem_cor}"
    fi
}

# Função para executar o proxy com configurações específicas
run_proxy() {
    clear
    echo ""
    echo -e "${azul}Iniciando configuração do proxy...${sem_cor}" && sleep 1
    echo -e "Digite a porta para o proxy e pressione Enter ${cinza}(padrão 80)${sem_cor}:"

    local port=$(get_port)
    if [ $? -ne 0 ]; then
        return
    fi

    echo ""
    echo -e "${azul}Digite o nome da VPN:${sem_cor}"
    local vpn_name=$(get_vpn_name)
    if [ $? -ne 0 ]; then
        echo -e "${vermelha}Erro ao obter o nome da VPN${sem_cor}"
        return
    fi

    local mode=$1
    local command="/usr/bin/proxy --port $port --http --response $vpn_name"

    case $mode in
        "ssh") command="$command --ssh-only" ;;
        "openvpn") command="$command --openvpn-port" ;;
    esac
    echo ""
    echo -e "Proxy executando na porta ${verde}$port${sem_cor} com configuração: ${azul}$mode${sem_cor} e VPN: ${rosa}$vpn_name${sem_cor}"
    echo ""
    screen -dmS proxy $command
}

# Menu principal
clear
while true; do
    echo -e "   ${azul}RevProxy ${sem_cor} - ${amarelo}$local_version${sem_cor}"
    echo ""
    echo -e "1. ${verde}Instalar Proxy${sem_cor}"
    if [ "$revproxy_installed" = true ]; then
        echo -e "2. ${amarelo}Restaurar Proxy Original${sem_cor}"
        echo -e "3. ${verde}Executar Proxy com HTTP e SSH${sem_cor}"
        echo -e "4. ${verde}Executar Proxy com HTTP e OpenVPN${sem_cor}"
    fi
    echo -e "5. ${azul}Listar portas em execução${sem_cor}"
    echo -e "6. ${rosa}Encerrar processo em uma porta${sem_cor}"
    echo -e "7. ${amarelo}Verificar atualizações do script${sem_cor}"
    echo -e "0. ${vermelha}Sair${sem_cor}"
    echo ""
    echo -n "Escolha uma opção: "
    read option

    case $option in
        1) install_revproxy ;;
        2) restore_proxy ;;
        3) [ "$revproxy_installed" = true ] && run_proxy "ssh" ;;
        4) [ "$revproxy_installed" = true ] && run_proxy "openvpn" ;;
        5) list_ports ;;
        6) kill_port ;;
        7) check_update ;;
        0) break ;;
        *) echo -e "${vermelha}Opção inválida.${sem_cor}" ;;
    esac
done
