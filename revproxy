#!/bin/bash
# Por C0nt05

# Definindo cores
vermelha='\033[0;31m'
verde='\033[0;32m'
amarelo='\033[0;33m'
azul='\033[0;34m'
rosa='\033[0;35m'
cinza='\033[0;90m'
semCor='\033[0m'
revproxyInstalado=false
versaoLocal="1.4.1"
versaoRemota_url="https://raw.githubusercontent.com/talesam/revproxy/main/versao.txt"

# Verifica se o script está sendo executado como root
if [[ $EUID -ne 0 ]]; then
    echo ""
    echo -e "${vermelha}Este script deve ser executado como root ou com sudo.${semCor}"
    exit 1
fi

# Verifica se o arquivo /usr/local/bin/revproxy já existe
if [ -f /usr/local/bin/revproxy ]; then
    revproxyInstalado=true
fi

# Função para instalar/atualizar revproxy
install_revproxy() {
    clear
    if [ ! -f /usr/local/bin/revproxy ]; then
        echo ""
        echo -e "${amarelo}Instalando revproxy...${semCor}" && sleep 1
        wget -q -O /usr/local/bin/revproxy https://raw.githubusercontent.com/talesam/revproxy/main/revproxy
        chmod +x /usr/local/bin/revproxy
        echo -e "${verde}revproxy instalado com sucesso!${semCor} Para executar use o comando ${rosa}revproxy${semCor}"
        
        install_proxy # Chama a função para instalar o proxy
        revproxyInstalado=true
        echo ""
    else
        echo -e "${azul}RevProxy já está instalado.${semCor}"
    fi
}

# Função para verificar e atualizar a versão do script
check_update() {
    clear
    versaoRemota=$(wget -qO- "$versaoRemota_url")
    if [ "$versaoRemota" != "$versaoLocal" ]; then
        echo -e "${amarelo}Uma nova versão do script está disponível!${semCor}"
        echo -e "${amarelo}Versão Atual: $versaoLocal, Nova Versão: $versaoRemota${semCor}"

        # Implementação da lógica de atualização
        echo -e "${amarelo}Atualizando script...${semCor}"
        wget -q -O /usr/local/bin/revproxy https://raw.githubusercontent.com/talesam/revproxy/main/revproxy
        chmod +x /usr/local/bin/revproxy
        echo -e "${verde}Script atualizado para a versão $versaoRemota. Por favor, execute-o novamente.${semCor}"
        exit 0
    else
        echo ""
        echo -e "${verde}Você já está na versão mais recente ($versaoLocal)${semCor}"
        echo ""
    fi
}

# Solicita e valida a porta
get_port() {
    #clear
    local port
    read -r port
    port=${port:-80} # Porta padrão é 80

    # Verifica se a porta é um número válido
    if ! [[ $port =~ ^[0-9]+$ ]] || [ $port -le 0 ] || [ $port -gt 65535 ]; then
        echo -e "${vermelha}Porta inválida. Por favor, insira um número entre 1 e 65535.${semCor}"
        return 1
    fi

    echo $port
}

# Solicita o nome da VPN
get_vpn_name() {
    #clear
    local nomeVpn
    read -r nomeVpn

    if [ -z "$nomeVpn" ]; then
        echo -e "${vermelha}Nome da VPN não pode ser vazio.${semCor}"
        return 1
    fi

    echo $nomeVpn
}

# Função para instalar o proxy
install_proxy() {
    clear
    echo ""
    if [ -f /usr/bin/proxy.bak ]; then
        echo -e " ${azul}*${semCor} ${amarelo}Um backup do proxy já existe. Instalação cancelada para evitar sobrescrever o backup.${semCor}"
        echo ""
        return
    fi
    if [ -f /usr/bin/proxy ]; then
        mv /usr/bin/proxy /usr/bin/proxy.bak
        echo -e "${amarelo}Backup do proxy atual salvo como proxy.bak${semCor}"
    fi
    curl -s -L -o /tmp/proxy https://github.com/talesam/revproxy/raw/main/proxy
    chmod +x /usr/bin/proxy
    clear
    echo ""
    echo -e "${verde}Proxy instalado com sucesso!${semCor}"
}

# Função para restaurar o proxy original
restore_proxy() {
    clear
    echo ""
    if [ -f /usr/bin/proxy.bak ]; then
        mv /usr/bin/proxy.bak /usr/bin/proxy
        echo -e " ${verde}*${semCor} Proxy original restaurado com sucesso."
        echo ""
        revproxyInstalado=false
    else
        echo -e "${vermelha}Backup do proxy não encontrado.${semCor}"
        echo ""
    fi
}

# Função para listar portas em execução
list_ports() {
    clear
    echo -e "${amarelo}Portas em execução:${semCor}"
    netstat -tuln | grep LISTEN
}

# Função para matar processo em uma porta específica
kill_port() {
    clear
    echo ""
    echo -n "Digite a porta para encerrar o processo: "
    read port
    pid=$(lsof -t -i:$port)
    if [ -n "$pid" ]; then
        kill $pid
        echo -e "${verde}Processo na porta $port encerrado.${semCor}"
    else
        echo -e "${vermelha}Nenhum processo encontrado na porta $port.${semCor}"
    fi
}

# Função para executar o proxy com configurações específicas
run_proxy() {
    clear
    echo ""
    echo -e "${azul}Iniciando configuração do proxy...${semCor}" && sleep 1
    echo -e "Digite a porta para o proxy e pressione Enter ${cinza}(padrão 80)${semCor}:"

    local port=$(get_port)
    if [ $? -ne 0 ]; then
        return
    fi

    echo ""
    echo -e "${azul}Digite o nome da VPN:${semCor}"
    local nomeVpn=$(get_vpn_name)
    if [ $? -ne 0 ]; then
        echo -e "${vermelha}Erro ao obter o nome da VPN${semCor}"
        return
    fi

    local mode=$1
    local command="/usr/bin/proxy --port $port --http --response $nomeVpn"

    case $mode in
        "ssh") command="$command --ssh-only" ;;
        "openvpn") command="$command --openvpn-port" ;;
    esac
    echo ""
    echo -e "Proxy executando na porta ${verde}$port${semCor} com configuração: ${azul}$mode${semCor} e VPN: ${rosa}$nomeVpn${semCor}"
    echo ""
    screen -dmS proxy $command
}

# Menu principal
clear
while true; do
    echo -e "   ${azul}RevProxy ${semCor} - ${amarelo}$versaoLocal${semCor}"
    echo ""
    echo -e "1. ${verde}Instalar Proxy${semCor}"
    if [ "$revproxyInstalado" = true ]; then
        echo -e "2. ${amarelo}Restaurar Proxy Original${semCor}"
        echo -e "3. ${verde}Proxy com HTTP e SSH${semCor} ${rosa}(APENAS)${semCor}"
        echo -e "4. ${verde}Proxy com HTTP e OpenVPN${semCor} ${rosa}(TUDO)${semCor}"
    fi
    echo -e "5. ${azul}Listar portas em execução${semCor}"
    echo -e "6. ${rosa}Encerrar processo em uma porta${semCor}"
    echo -e "7. ${amarelo}Verificar atualizações do script${semCor}"
    echo -e "0. ${vermelha}Sair${semCor}"
    echo ""
    echo -n "Escolha uma opção: "
    read option

    case $option in
        1) install_revproxy ;;
        2) restore_proxy ;;
        3) [ "$revproxyInstalado" = true ] && run_proxy "ssh" ;;
        4) [ "$revproxyInstalado" = true ] && run_proxy "openvpn" ;;
        5) list_ports ;;
        6) kill_port ;;
        7) check_update ;;
        0) break ;;
        *) echo -e "${vermelha}Opção inválida.${semCor}" ;;
    esac
done
